// <auto-generated />
using System;
using AirComapnySystem.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirCompanySystem.DataContext.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250329081804_seed")]
    partial class seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirCompanySystem.Models.Airplane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CrewId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SeatsCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.ToTable("Airplanes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(6575), new TimeSpan(0, 0, 0, 0, 0)),
                            SeatsCount = 180
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(6585), new TimeSpan(0, 0, 0, 0, 0)),
                            SeatsCount = 220
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(6587), new TimeSpan(0, 0, 0, 0, 0)),
                            SeatsCount = 150
                        });
                });

            modelBuilder.Entity("AirCompanySystem.Models.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AirplaneId")
                        .HasColumnType("int");

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AirplaneId");

                    b.HasIndex("CityId");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AirportName = "Sofia International Airport",
                            CityId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(4813), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            AirportName = "Charles de Gaulle Airport",
                            CityId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(4825), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            AirportName = "Adolfo Suárez Madrid–Barajas Airport",
                            CityId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(4827), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            AirportName = "Leonardo da Vinci International Airport",
                            CityId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(4828), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            AirportName = "Henri Coandă International Airport",
                            CityId = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(4830), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            AirportName = "Haneda Airport",
                            CityId = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(4897), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            AirportName = "Beijing Capital International Airport",
                            CityId = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(4899), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            AirportName = "Indira Gandhi International Airport",
                            CityId = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(4900), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("AirCompanySystem.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(3898), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(3912), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Paris"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(3914), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Madrid"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(3915), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Rome"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(3917), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bucharest"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(3920), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(3922), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Beijing"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(3923), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "New Delhi"
                        });
                });

            modelBuilder.Entity("AirCompanySystem.Models.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContinentName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Continents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContinentName = "Europe",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(1613), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            ContinentName = "Asia",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(1898), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("AirCompanySystem.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContinentId")
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContinentId = 1,
                            CountryName = "Bulgaria",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(2714), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            ContinentId = 1,
                            CountryName = "France",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(2929), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            ContinentId = 1,
                            CountryName = "Spain",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(2932), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            ContinentId = 1,
                            CountryName = "Italy",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(2933), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            ContinentId = 1,
                            CountryName = "Romania",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(2935), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            ContinentId = 2,
                            CountryName = "Japan",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(2939), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            ContinentId = 2,
                            CountryName = "China",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(2940), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            ContinentId = 2,
                            CountryName = "India",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(2942), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("AirCompanySystem.Models.Crew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("RoleId");

                    b.ToTable("Crews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(6122), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "John Smith",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(6132), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Maria Garcia",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(6134), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "James Wilson",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(6135), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sarah Johnson",
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("AirCompanySystem.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AirplaneId")
                        .HasColumnType("int");

                    b.Property<int?>("AirportId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("FlightDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FlightDuration")
                        .HasColumnType("int");

                    b.Property<int>("PassengerCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AirplaneId");

                    b.HasIndex("AirportId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AirplaneId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(8740), new TimeSpan(0, 0, 0, 0, 0)),
                            FlightDate = new DateTimeOffset(new DateTime(2025, 3, 30, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(7729), new TimeSpan(0, 0, 0, 0, 0)),
                            FlightDuration = 120,
                            PassengerCount = 150
                        },
                        new
                        {
                            Id = 2,
                            AirplaneId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(8904), new TimeSpan(0, 0, 0, 0, 0)),
                            FlightDate = new DateTimeOffset(new DateTime(2025, 3, 31, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(8893), new TimeSpan(0, 0, 0, 0, 0)),
                            FlightDuration = 180,
                            PassengerCount = 200
                        });
                });

            modelBuilder.Entity("AirCompanySystem.Models.FlightStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("FlightStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(7071), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Scheduled"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(7078), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Boarding"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(7080), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "In Flight"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(7081), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Landed"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(7082), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Delayed"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(7085), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = "Cancelled"
                        });
                });

            modelBuilder.Entity("AirCompanySystem.Models.FlightStatusChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangeAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<int?>("FlightStatusId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("FlightStatusId");

                    b.ToTable("FlightStatusChanges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChangeAt = new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Utc).AddTicks(9370),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(9614), new TimeSpan(0, 0, 0, 0, 0)),
                            FlightId = 1,
                            FlightStatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            ChangeAt = new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Utc).AddTicks(9627),
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(9627), new TimeSpan(0, 0, 0, 0, 0)),
                            FlightId = 2,
                            FlightStatusId = 1
                        });
                });

            modelBuilder.Entity("AirCompanySystem.Models.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("Passengers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 252, DateTimeKind.Unspecified).AddTicks(149), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Alex Brown"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 252, DateTimeKind.Unspecified).AddTicks(157), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Emma Wilson"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 252, DateTimeKind.Unspecified).AddTicks(159), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Michael Chen"
                        });
                });

            modelBuilder.Entity("AirCompanySystem.Models.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("PassengerId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.HasIndex("TicketId")
                        .IsUnique()
                        .HasFilter("[TicketId] IS NOT NULL");

                    b.ToTable("Payrolls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 252, DateTimeKind.Unspecified).AddTicks(1670), new TimeSpan(0, 0, 0, 0, 0)),
                            PassengerId = 1,
                            TicketId = 1,
                            Total = 299.99000000000001
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 252, DateTimeKind.Unspecified).AddTicks(1681), new TimeSpan(0, 0, 0, 0, 0)),
                            PassengerId = 2,
                            TicketId = 2,
                            Total = 499.99000000000001
                        });
                });

            modelBuilder.Entity("AirCompanySystem.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(5509), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleName = "Pilot"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(5521), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleName = "Co-Pilot"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(5523), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleName = "Flight Attendant"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 251, DateTimeKind.Unspecified).AddTicks(5538), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleName = "Engineer"
                        });
                });

            modelBuilder.Entity("AirCompanySystem.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FlightId")
                        .HasColumnType("int");

                    b.Property<int?>("PassengerId")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("TicketPrice")
                        .HasPrecision(9, 3)
                        .HasColumnType("decimal(9,3)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("PassengerId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 252, DateTimeKind.Unspecified).AddTicks(1029), new TimeSpan(0, 0, 0, 0, 0)),
                            FlightId = 1,
                            SeatNumber = 15,
                            TicketPrice = 299.99m,
                            Type = "Economy"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 3, 29, 8, 18, 4, 252, DateTimeKind.Unspecified).AddTicks(1044), new TimeSpan(0, 0, 0, 0, 0)),
                            FlightId = 1,
                            SeatNumber = 3,
                            TicketPrice = 499.99m,
                            Type = "Business"
                        });
                });

            modelBuilder.Entity("AirCompanySystem.Models.Airplane", b =>
                {
                    b.HasOne("AirCompanySystem.Models.Crew", null)
                        .WithMany("Airplanes")
                        .HasForeignKey("CrewId");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Airport", b =>
                {
                    b.HasOne("AirCompanySystem.Models.Airplane", null)
                        .WithMany("Airports")
                        .HasForeignKey("AirplaneId");

                    b.HasOne("AirCompanySystem.Models.City", "City")
                        .WithMany("Airports")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("AirCompanySystem.Models.City", b =>
                {
                    b.HasOne("AirCompanySystem.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Country", b =>
                {
                    b.HasOne("AirCompanySystem.Models.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentId");

                    b.Navigation("Continent");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Crew", b =>
                {
                    b.HasOne("AirCompanySystem.Models.Flight", null)
                        .WithMany("Crews")
                        .HasForeignKey("FlightId");

                    b.HasOne("AirCompanySystem.Models.Role", "Role")
                        .WithMany("Crews")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Flight", b =>
                {
                    b.HasOne("AirCompanySystem.Models.Airplane", "Airplane")
                        .WithMany("Flights")
                        .HasForeignKey("AirplaneId");

                    b.HasOne("AirCompanySystem.Models.Airport", null)
                        .WithMany("Flights")
                        .HasForeignKey("AirportId");

                    b.Navigation("Airplane");
                });

            modelBuilder.Entity("AirCompanySystem.Models.FlightStatusChange", b =>
                {
                    b.HasOne("AirCompanySystem.Models.Flight", "Flight")
                        .WithMany("FlightStatusChanges")
                        .HasForeignKey("FlightId");

                    b.HasOne("AirCompanySystem.Models.FlightStatus", "FlightStatus")
                        .WithMany("FlightStatusChanges")
                        .HasForeignKey("FlightStatusId");

                    b.Navigation("Flight");

                    b.Navigation("FlightStatus");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Passenger", b =>
                {
                    b.HasOne("AirCompanySystem.Models.Flight", null)
                        .WithMany("Passengers")
                        .HasForeignKey("FlightId");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Payroll", b =>
                {
                    b.HasOne("AirCompanySystem.Models.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId");

                    b.HasOne("AirCompanySystem.Models.Ticket", "Ticket")
                        .WithOne("Payroll")
                        .HasForeignKey("AirCompanySystem.Models.Payroll", "TicketId");

                    b.Navigation("Passenger");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Ticket", b =>
                {
                    b.HasOne("AirCompanySystem.Models.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId");

                    b.HasOne("AirCompanySystem.Models.Passenger", "Passenger")
                        .WithMany("Tickets")
                        .HasForeignKey("PassengerId");

                    b.Navigation("Flight");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Airplane", b =>
                {
                    b.Navigation("Airports");

                    b.Navigation("Flights");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Airport", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("AirCompanySystem.Models.City", b =>
                {
                    b.Navigation("Airports");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Continent", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Crew", b =>
                {
                    b.Navigation("Airplanes");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Flight", b =>
                {
                    b.Navigation("Crews");

                    b.Navigation("FlightStatusChanges");

                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("AirCompanySystem.Models.FlightStatus", b =>
                {
                    b.Navigation("FlightStatusChanges");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Passenger", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Role", b =>
                {
                    b.Navigation("Crews");
                });

            modelBuilder.Entity("AirCompanySystem.Models.Ticket", b =>
                {
                    b.Navigation("Payroll");
                });
#pragma warning restore 612, 618
        }
    }
}
